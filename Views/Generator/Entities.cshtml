@using ASPIFY_MVC.DTO
@{
    Layout = "_DashLayout";
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Entities Section</title>
  <!-- Bootstrap CSS link -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    /* Red theme */
    body {
      background-color: #f8f9fa;
    }
    /* Adjustments for demo purposes */
    .card {
      margin-bottom: 20px; /* Add space between cards */
    }
    .form-group {
      margin-bottom: 15px; /* Add space between form elements */
    }
    .property-box .form-row {
      align-items: center;
    }
    .property-box .close {
      font-size: 24px;
      color: #dc3545;
      cursor: pointer;
      margin-left: 10px;
    }

    .property-box, entity-list-box {
            width: 100%;
            max-height: 300px; /* Set the maximum height */
            overflow: auto; /* Enable scrolling when content exceeds the height */
            padding: 10px;
            box-sizing: border-box; /* Ensure padding is included in the height calculation */
        }
  </style>
</head>
<body>
  <div class="container">
    <div id="alertMessage" class="alert" role="alert" style="display: none;"></div>

 
   <div class="modal" id="entityDetailsModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Entity Details</h5>
                <!-- Close button -->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeEntityDetails()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Entity details -->
                <p id="entityDetails">
                    <strong>Name:</strong> EntityName<br>
                    <strong>Type:</strong> EntityType<br>
                    <strong>Properties:</strong><br>
                    - Property1: Type1<br>
                    - Property2: Type2<br>
                    - Property3: Type3<br>
                </p>
            </div>
            <div class="modal-footer">
                <!-- Close button -->
                <button type="button" onclick="closeEntityDetails()" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

    <!-- Add Entity Form -->
    <div class="card">
      <div class="card-body">
        <div class="card-body d-flex justify-content-between align-items-center">
          <h2 class="card-title">Add Entity</h2>
          <a asp-controller="generator" asp-action="entities"><button type="button" class="btn btn-success" ><span>&#43;</span></button></a>
        </div>

        <form id="addEntityForm">
          <div class="form-group">
            <label for="entityName">Entity Name:</label>
            <input type="text" class="form-control" id="entityName" name="entityName" placeholder="Enter entity name">
          </div>

          <hr>

          <h3>Properties</h3>
          <div class="property-box">
            <div class="form-group">
              <div class="form-row">
                <div class="col-md-4">
                  <label for="propertyName">Property Name:</label>
                  <input type="text" class="form-control" id="propertyName" name="p1" placeholder="Enter property name">
                </div>
                <div class="col">
                  <label for="propertyType">Property Type:</label>
                  <select class="form-control" id="propertyType" name="p1Type">
                    <option value="String">String</option>
                    <option value="int">Integer</option>
                    <option value="double">Double</option>
                    <option value="Boolean">Boolean</option>
                    <option value="DateTime">DateTime</option>
                    <option value="Point">Point</option>

                  </select>
                </div>
                <div class="col-md3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="isPrimaryKey" name="p1PrimaryKey">
                        <label class="form-check-label" for="isPrimaryKey">Primary Key</label>
                    </div>
                </div>
              </div>
            </div>
          </div>

          <div class="form-group">
            <button type="button" class="btn btn-primary mr-2" onclick="addProperty()">Add Property</button>
            <button type="button" class="btn btn-success" onclick="addEntity()">Add Entity</button>
          </div>
        </form>
      </div>
    </div>

    <!-- List of Existing Entities -->
    <div class="card">
      <div class="card-body entity-list-box">
        <h2 class="card-title">Existing Entities</h2>
        <ul id="entityList" class="list-group">
              @{if (ViewBag.Entities == null)
                  ViewBag.Entities = new List<Entity>();
               }
              @foreach (var entity in ViewBag.Entities)
              {
                  <li class="list-group-item"><a onclick="showEntityDetails('@entity.Name')">@entity.Name</a> 

                      <button type="button" class="close" aria-label="Close" >
                        <a href="@($"remove-entity/{entity.Name}")">
                          <span aria-hidden="true">&times;</span>
                        </a>
                      </button>
                  </li>
              }     
                    <!-- List of entities will appear here -->
        </ul>
      </div>
    </div>
  </div>

  <script>
    // Function to add a new property
    function addProperty() {
      var propertyBox = document.querySelector(".property-box");
      var propertyCount = propertyBox.querySelectorAll(".form-group").length;
      var newProperty = document.createElement("div");
      newProperty.className = "form-group";
      newProperty.innerHTML = `
        <div class="form-row">
          <div class="col">
            <label for="propertyName">Property Name:</label>
            <input type="text" class="form-control" id="propertyName" name="p${propertyCount + 1}" placeholder="Enter property name">
          </div>
          <div class="col">
            <label for="propertyType">Property Type:</label>
            <select class="form-control" id="propertyType" name="p${propertyCount + 1}Type">
              <option value="String">String</option>
              <option value="int">Integer</option>
              <option value="double">Double</option>
              <option value="Boolean">Boolean</option>
              <option value="DateTime">DateTime</option>
              <option value="Point">Point</option>
            </select>
          </div>
          <div class="col-md3" style="display: none;">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="isPrimaryKey" name="p${propertyCount + 1}PrimaryKey" >
                        <label class="form-check-label" for="isPrimaryKey">Primary Key</label>
                    </div>
                </div>
          <button type="button" class="close" aria-label="Close" onclick="removeProperty(this)">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
      `;
      propertyBox.appendChild(newProperty);
    }

    function removeProperty(button) {
      var propertyBox = document.querySelector(".property-box");
      propertyBox.removeChild(button.closest(".form-group"));
    }

    // Function to send form data to server as JSON
    function sendForm() {
      var entityName = document.getElementById("entityName").value.trim();
      if (!entityName) {
        showAlert("Entity name is required.", "alert-danger");
        return;
      }

      var properties = [];
      var propertyBox = document.querySelector(".property-box");
      var propertyCount = propertyBox.querySelectorAll(".form-group").length;
      for (var j = 0; j < propertyCount; j++) {
        var propertyName = document.querySelector(`input[name=p${j + 1}]`).value;
        var propertyType = document.querySelector(`select[name=p${j + 1}Type]`).value;
        properties.push({ name: propertyName, type: propertyType, isPk: document.querySelector(`input[name=p${j + 1}PrimaryKey]`).checked});
      }

      var entity = {
        name: entityName,
        properties: properties
      };

      console.log(entity);

      // Send the data to the server as JSON
      fetch("/generator/add-entity", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(entity)
      })
        .then(response => {
          if (response.ok) {
            showAlert("Entity added successfully!", "alert-success");
            window.location.reload();   
            return response.json();
          } else {
            showAlert("Error adding entity.", "alert-danger");
            throw new Error("Error adding entity");
          }
        })
        .then(data => console.log(data))
        .catch(error => console.error("Error:", error));
    }

    // Function to show alert messages
    function showAlert(message, alertClass) {
      var alertDiv = document.getElementById("alertMessage");
      alertDiv.className = `alert ${alertClass}`;
      alertDiv.textContent = message;
      alertDiv.style.display = "block";
      setTimeout(() => {
        alertDiv.style.display = "none";
      }, 3000);
    }

    // Function to add a new entity
    function addEntity() {
      var entityName = document.getElementById("entityName").value;
      if (entityName.trim() !== "") {
        var entityList = document.getElementById("entityList");
        var listItem = document.createElement("li");
        listItem.className = "list-group-item";
        listItem.appendChild(document.createTextNode(entityName));
        entityList.appendChild(listItem);
        sendForm();
        document.getElementById("addEntityForm").reset();
      }
    }

    //function to fetch entity details from server show modal to display the entity details
    function showEntityDetails(entityName) {
      fetch(`/generator/entities/${entityName}`)
        .then(response => response.json())
        .then(data => {
          var entityDetails = document.getElementById("entityDetails");
          entityDetails.innerHTML = `
            <strong>Name:</strong> ${data.name}<br>
            <strong>Properties:</strong><br>
          `;
          data.properties.forEach(property => {
            entityDetails.innerHTML += `- ${property.name}: ${property.type}<br>`;
          });
          $('#entityDetailsModal').modal('show');
        })
        .catch(error => console.error("Error:", error));
    }
   
    //function to close the modal
    function closeEntityDetails() {
      $('#entityDetailsModal').modal('hide');
    }
  </script>
</body>
</html>
