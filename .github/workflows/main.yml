name: learn-github-actions

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Cache .NET packages
      uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-

    # - name: Restore dependencies
    #   working-directory: App
    #   run: dotnet restore --no-cache

    # - name: Build and Test
    #   working-directory: App
    #   run: |
    #     dotnet build --no-restore --property WarningLevel=0
    #     dotnet test --no-build --verbosity normal

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker image
      working-directory: App
      run: |
        docker build -t aspifyapp:latest -f DockerFile .
        docker tag aspifyapp dedsec007/aspifyapp:version1
        docker push dedsec007/aspifyapp:version1

    # You may consider moving SSH-related operations to a separate workflow
    #if they are not essential for every build.

    - name: Set up SSH and add host to known_hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 34.35.59.101 >> ~/.ssh/known_hosts

    - name: Add SSH key to agent
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
      run: |
        eval "$(ssh-agent -a $SSH_AUTH_SOCK)"
        echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/id_rsa

    - name: Deploy to server
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh raitrafiorenana_rambeloson@34.35.59.101 'echo "SSH connection successful" && sudo ./deploy-script.sh'
